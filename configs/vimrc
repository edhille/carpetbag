let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC

endif
if has('nvim')
	call plug#begin('~/.local/share/nvim/plugged')
	Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
	let g:python_host_prog = '/usr/local/bin/python'
	let g:python3_host_prog = '/usr/local/bin/python3'
	let g:deoplete#enable_at_startup = 1
	let g:deoplete#enable_debug = 1
	let g:deoplete#enable_profile = 1
	Plug 'neomake/neomake'
	au BufRead,BufNewFile,BufWritePost * Neomake
	Plug 'mhartington/nvim-typescript'
else
	if empty(glob('~/.vim/autoload/plug.vim'))
		  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
			  \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
			autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
	endif

	call plug#begin('~/.vim/plugged')
endif

Plug 'scrooloose/nerdtree'
Plug 'vim-scripts/Auto-Pairs'
Plug 'flazz/vim-colorschemes'
Plug 'yearofmoo/Vim-Darkmate'
Plug 'kien/ctrlp.vim'
Plug 'tomtom/tcomment_vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'bling/vim-airline'
Plug 'tpope/vim-fugitive'
Plug 'sheerun/vim-polyglot'
Plug 'vim-scripts/xoria256.vim'

Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }

Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = [ 'coc-tsserver' ]

if isdirectory('./node_modules') && isdirectory('./node_modules/prettier')
  let g:coc_global_extensions += ['coc-prettier']
endif

if isdirectory('./node_modules') && isdirectory('./node_modules/eslint')
  let g:coc_global_extensions += ['coc-eslint']
endif

function! ShowDocIfNoDiagnostic(timer_id)
  if (coc#float#has_float() == 0 && CocHasProvider('hover') == 1)
    silent call CocActionAsync('doHover')
  endif
endfunction

function! s:show_hover_doc()
  call timer_start(500, 'ShowDocIfNoDiagnostic')
endfunction

autocmd CursorHoldI * :call <SID>show_hover_doc()
autocmd CursorHold * :call <SID>show_hover_doc()

if executable('ag') 
	Plug 'rking/ag.vim'
	" Use ag over grep
	set grepprg=ag\ --nogroup\ --nocolor

	" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
	let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

	" ag is fast enough that CtrlP doesn't need to cache
	let g:ctrlp_use_caching = 0
endif

call plug#end()

" set the spacebar as our leader
let mapleader = "\<Space>"

" layout
set ruler
set nu
set wrap

" help keep lines to the appropriate length
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
set lbr
set tw=130

" search
set ignorecase
set smartcase
set hlsearch
set incsearch

" bind K to grep word under cursor
nnoremap <Leader>K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" tabs
set noexpandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set autoindent

" but let files have overrides...
set modeline

" Buffer mods
set hidden " retain undos in buffers
nnoremap <Leader>n :bnext<Cr>
nnoremap <Leader>p :bprev<Cr>

" enable clipboard copying in osx
set clipboard=unnamed

" misc
let g:netrw_fastbrowse=0
set nobackup
filetype plugin indent on
syntax on

" javascript tweaks
au BufNewFile,BufRead *.pjs setf javascript

" json tweaks
au! BufRead,BufNewFile *.json set filetype=json

augroup json_autocmd
  autocmd!
  autocmd FileType json set autoindent
  autocmd FileType json set formatoptions=tcq2l
  autocmd FileType json set textwidth=78 shiftwidth=2
  autocmd FileType json set softtabstop=2 tabstop=8
  autocmd FileType json set expandtab
  autocmd FileType json set foldmethod=syntax
augroup END

augroup markdown
	au! BufRead,BufNewFile *.mkd   setfiletype mkd
augroup END

" color stuff
" disable background erase (so colors draw nice in tmux)
set t_ut=
" optimistically assume we are on 256-color terminal
set t_Co=256
set background=dark

" NOTE: in tmux, using both these colorschemes creates an acceptable palette (singly, neither do....)
"colorscheme 256-grayvim " ok...
"colorscheme devbox-dark-256 " good...
"colorscheme twilight256
"colorscheme desert
"colorscheme torte
colorscheme xoria256

" Give a shortcut key to NERD Tree
map <C-n> :NERDTreeToggle<CR>
let NERDTreeQuitOnOpen=1

" Give a shortcut key to running validations
map <F5> :Make<CR><C-w><Up>

" common operations
nnoremap <Leader>o :CtrlP<CR>

set statusline+=%#warningmsg#
set statusline+=%*

" Ctrl-P
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$'
  \ }

" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
set laststatus=2
