" set the spacebar as our leader
let mapleader = "\<Space>"

" pathogen
call pathogen#infect()
call pathogen#helptags()

" neocomplete
let g:neocomplete#enable_at_startup = 1

" layout
set ruler
set nu
set wrap

" help keep lines to the appropriate length
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%>131v.\+/
set lbr
set tw=130

" search
set ignorecase
set smartcase
set hlsearch
set incsearch

" The Silver Searcher
if executable('ag')
	" Use ag over grep
	set grepprg=ag\ --nogroup\ --nocolor

	" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
	let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

	" ag is fast enough that CtrlP doesn't need to cache
	let g:ctrlp_use_caching = 0
endif

" bind K to grep word under cursor
nnoremap <Leader>K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" tabs
set noexpandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set autoindent

" but let files have overrides...
set modeline

" Buffer mods
set hidden " retain undos in buffers
nnoremap <Leader>n :bnext<Cr>
nnoremap <Leader>p :bprev<Cr>

" enable clipboard copying in osx
set clipboard=unnamed

" misc
let g:netrw_fastbrowse=0
set nobackup
filetype plugin indent on
syntax on
set ttymouse=xterm

" folding
set foldlevelstart=3
let ruby_fold=1
let perl_fold=1
let perl_fold_blocks=1
set foldmethod=indent
autocmd Syntax c,cpp,javascript,vim,xml,html,xhtml setlocal foldmethod=syntax
autocmd Syntax c,cpp,javascript,vim,xml,html,xhtml,perl normal zR

" javascript tweaks
au BufNewFile,BufRead *.pjs setf javascript

" json tweaks
au! BufRead,BufNewFile *.json set filetype=json

augroup json_autocmd
  autocmd!
  autocmd FileType json set autoindent
  autocmd FileType json set formatoptions=tcq2l
  autocmd FileType json set textwidth=78 shiftwidth=2
  autocmd FileType json set softtabstop=2 tabstop=8
  autocmd FileType json set expandtab
  autocmd FileType json set foldmethod=syntax
augroup END

" tweaks for specific filetypes
if !exists("custom_file_formatting_loaded")
	let custom_file_formatting_loaded=1
	autocmd FileType perl call PerlFileSettings()
	au BufNewFile,BufRead *.cap setf ruby
	autocmd FileType ruby set tabstop=2 shiftwidth=2 autoindent
	"autocmd FileType javascript set autoindent
endif

function! PerlFileSettings()
	set cindent
	set cinkeys=0{,0},!^F,o,O,e
endfunction

augroup markdown
	au! BufRead,BufNewFile *.mkd   setfiletype mkd
augroup END

" color stuff
" disable background erase (so colors draw nice in tmux)
set t_ut=
" optimistically assume we are on 256-color terminal
set t_Co=256
set background=dark

" NOTE: in tmux, using both these colorschemes creates an acceptable palette (singly, neither do....)
"colorscheme 256-grayvim " ok...
"colorscheme devbox-dark-256 " good...
"colorscheme twilight256
"colorscheme desert
"colorscheme torte
colorscheme xoria256

" Give a shortcut key to NERD Tree
map <C-n> :NERDTreeToggle<CR>
let NERDTreeQuitOnOpen=1

" Give a shortcut key to running validations
map <F5> :Make<CR><C-w><Up>

" common operations
nnoremap <Leader>o :CtrlP<CR>

" PHP folding (really buggy...)
map <F6> <Esc>:EnableFastPHPFolds<Cr>
map <F7> <Esc>:EnablePHPFolds<Cr>
map <F8> <Esc>:DisablePHPFolds<Cr>

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" Syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers = ['eslint']
let b:syntastic_javascript_eslint_exec = nrun#Which('eslint')

let g:syntastic_error_symbol = '‚ùå'
let g:syntastic_style_error_symbol = '‚ÅâÔ∏è'
let g:syntastic_warning_symbol = '‚ö†Ô∏è'
let g:syntastic_style_warning_symbol = 'üí©'

highlight link SyntasticErrorSign SignColumn
highlight link SyntasticWarningSign SignColumn
highlight link SyntasticStyleErrorSign SignColumn
highlight link SyntasticStyleWarningSign SignColumn

nnoremap <Leader>l :execute SyntasticCheck eslint 

" Ctrl-P
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$'
  \ }

" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
set laststatus=2

" jsbeautify
" autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
" for html
" autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
" for css or scss
" autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>
" autocmd FileType javascript let b:syntastic_checkers = findfile('.eslintrc', '.;') != '' ? ['eslint'] : ['jshint']
